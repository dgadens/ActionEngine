//******************************
// GS utilizado para renderizar os sprites
// Creator: Daniel Gadens
// Date: 29/06/2012
//******************************

struct VS_INPUT
{
    float2 TopLeft 	: ANCHOR;
    float2 Dimensions   : DIMENSIONS;
    float4 Rectangle    : TEXCOORD0;
    float  Rotation     : TEXCOORD1;
    float  Aspect     : TEXCOORD2;
    float2 Origin      : TEXCOORD3;
    float4 Color	: COLOR;
};

struct PS_INPUT
{
    float4 Position  : SV_POSITION;
    float2 TexCoord  : TEXCOORD0;
    float4 Color     : COLOR0;
};

[maxvertexcount(4)]
void main( point VS_INPUT sprite[1], inout TriangleStream<PS_INPUT> triStream )
{
    PS_INPUT v;
    v.Color = sprite[0].Color;			
	
    //***** cria o quadrado ******
    float cosRot = cos(sprite[0].Rotation);
    float sinRot = sin(sprite[0].Rotation); 

    float xorig = sprite[0].Origin.x;
    float yorig = sprite[0].Origin.y;

    float2 temp;
    
    temp.x = (sprite[0].Dimensions.x - xorig) * cosRot +                         (sprite[0].Dimensions.y - yorig) * sinRot/sprite[0].Aspect;
    temp.y = (sprite[0].Dimensions.x - xorig) * sinRot * sprite[0].Aspect - (sprite[0].Dimensions.y - yorig) * cosRot;

    //bottom right (uso a hipotenusa)
    v.Position = float4(sprite[0].TopLeft.x + temp.x, sprite[0].TopLeft.y + temp.y, 0, 1);	
    v.TexCoord = float2(sprite[0].Rectangle.z, sprite[0].Rectangle.w);
    triStream.Append(v);
    

    //top right
    temp.x = (sprite[0].Dimensions.x - xorig) * cosRot -                         yorig * sinRot/sprite[0].Aspect;
    temp.y = (sprite[0].Dimensions.x - xorig) * sinRot * sprite[0].Aspect + yorig * cosRot;

    v.Position = float4(sprite[0].TopLeft.x + temp.x, sprite[0].TopLeft.y + temp.y, 0, 1);	
    v.TexCoord = float2(sprite[0].Rectangle.z, sprite[0].Rectangle.y);
    triStream.Append(v);

    //bottom left
    temp.x = xorig * cosRot -                         (sprite[0].Dimensions.y - yorig) * sinRot/sprite[0].Aspect;
    temp.y = xorig * sinRot * sprite[0].Aspect + (sprite[0].Dimensions.y - yorig) * cosRot;
    
    v.Position = float4(sprite[0].TopLeft.x - temp.x, sprite[0].TopLeft.y - temp.y, 0, 1);	
    v.TexCoord = float2(sprite[0].Rectangle.x, sprite[0].Rectangle.w);	
    triStream.Append(v);
	
	
    //top left   
    temp.x = xorig * cosRot +                         yorig * sinRot/sprite[0].Aspect;
    temp.y = xorig * sinRot * sprite[0].Aspect - yorig * cosRot;

    v.Position = float4(sprite[0].TopLeft.x - temp.x, sprite[0].TopLeft.y - temp.y, 0, 1);	
    v.TexCoord = float2(sprite[0].Rectangle.x, sprite[0].Rectangle.y);
    triStream.Append(v);
}